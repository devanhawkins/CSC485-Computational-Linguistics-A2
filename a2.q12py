from nltk import parse_cfg
from nltk.parse import ChartParser, BU_STRATEGY
from nltk.parse import TestGrammar

import sys

#question 1.1 all verbs are intransitive, 
# do not need objects
#NPrp - Proper noun
#NPro - Pro noun
#Adj - Adjective
#Adv - Adverb
#NPPrp - Noun
#NP_Prp -> AdjP NPrp | NPrp ?
grammar=parse_cfg('''
S -> NP VP
PP -> P NP | P NPro_obj
Adv -> Adv Adv
Adj -> Adj Adj
VP -> V Adv | Adv V | V | VP PP
NP -> NP_Pro | NP_Prp | NP_N
NP_Pro -> NPro_obj N | NPro_obj Adj N | NPro_sub
NP_Prp -> Adj NPrp | NPrp
NP_N -> Det N | Det Adj N | NP_N PP
N -> 'fur' | 'cat'
NPrp -> 'Nadia'
NPro_sub -> 'she' | 'She'
NPro_obj -> 'her' | 'Her'
Det -> 'the' | 'The'
Adj -> 'long' | 'soft' | 'tall'
Adv -> 'immediately' | 'slowly'
V -> 'left' | 'ate' | 'arrived'
P -> 'in' | 'with' | 'on'
''')

test={}
test['accept'] = [
'Nadia left immediately',
'The cat with the long soft fur slowly ate',
'the cat with the long soft fur slowly ate',
'She arrived',
'she arrived',
]

test['reject'] = [
'nadia left immediately',
'Nadia with the long soft fur slowly ate',
'The cat with the tall her arrived',
'The cat with the slowly tall her arrived',
'She with the long soft fur slowly ate',
'The cats with the long soft fur slowly ate', #dont support plural
]


parser=ChartParser(grammar,BU_STRATEGY)

print 'Should Accept'
for sentence in test['accept']:
	results=parser.nbest_parse(sentence.split())
	if len(results)==0:
		print 'FAIL!!'
		sys.exit()
	else:
		print '\t%s\t%d' % (sentence,len(results))


print 'Should Fail'
for sentence in test['reject']:
	try:
		results=parser.nbest_parse(sentence.split())
	except ValueError:
		results=[]
	if len(results)!=0:
		print 'FAIL!!'
		sys.exit()
	else:
		print '\t%s\t%d' % (sentence,len(results))

















